version: build{build}

max_jobs: 1

# Default configuration is actually for master and pre-release branches.
# Branch dev overrides several settings after this default configuration.
# Deployment will be added for branch master only.

install:
  - cmd: set PYTHONIOENCODING=utf-8
  - cmd: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | %PYTHON38%
  - cmd: set PATH=%USERPROFILE%\\.poetry\\bin;%PATH%
  - cmd: poetry env use %PYTHON36%
  - cmd: poetry install
  - cmd: poetry env use %PYTHON37%
  - cmd: poetry install
  - cmd: poetry env use %PYTHON38%
  - cmd: poetry install
  # Ubuntu
  # We need wheel installed to build wheels
  - sh: sudo apt-get -y update
  - sh: sudo apt-get install -y python3-venv
  - sh: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
  - sh: source $HOME/.poetry/env
  - sh: poetry env use $PYTHON36
  - sh: poetry install
  - sh: poetry env use $PYTHON37
  - sh: poetry install
  - sh: poetry env use $PYTHON38
  - sh: poetry install

build: off

test_script:
  - cmd: poetry env use %PYTHON36%
  - cmd: poetry run pytest -vv
  - cmd: poetry env use %PYTHON37%
  - cmd: poetry run pytest -vv
  - cmd: poetry env use %PYTHON38%
  - cmd: poetry run pytest -vv
  - sh: poetry env use $PYTHON36
  - sh: poetry run pytest -vv
  - sh: poetry env use $PYTHON37
  - sh: poetry run pytest -vv
  - sh: poetry env use $PYTHON38
  - sh: poetry run pytest -vv

for:
-
    branches:
        only:
            - master
            - pre-release
    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python
    # https://www.appveyor.com/docs/linux-images-software#python
    environment:
      matrix:
        - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
          PYTHON36: "C:\\Python36-x64\\python.exe"
          PYTHON37: "C:\\Python37-x64\\python.exe"
          PYTHON38: "C:\\Python38-x64\\python.exe"
        - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
          PYTHON36: "$HOME/venv3.6/bin/python3.6"
          PYTHON37: "$HOME/venv3.7/bin/python3.7"
          PYTHON38: "$HOME/venv3.8/bin/python3.8"

-
    branches:
        only:
            - dev
    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python
    # https://www.appveyor.com/docs/linux-images-software#python
    environment:
      matrix:
        - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004

    install:
      # We need wheel installed to build wheels
      - sh: sudo apt-get -y update
      - sh: sudo apt-get install -y python3-venv
      - sh: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
      - sh: source $HOME/.poetry/env
      - sh: poetry env use 3.8
      - sh: poetry install

    test_script:
      - sh: poetry run coverage run --source=vocashaker -m pytest -vv

    after_test:
        # COVERALLS_REPO_TOKEN's value is secret and cannot be published. It is:
        # - taken from coveralls.io > vocashaker > settings
        # - set directly in ci.appveyor.com > vocashaker > settings > environment
        #   (Ubuntu2004)
        - sh: poetry run coveralls

    # branches:
    #     only:
    #         - master
    #
    # ADD DEPLOYMENT PART


#   # This step builds your wheels.
#   - cmd: "%PYTHON%\\python.exe setup.py bdist_wheel"
#   - sh: "codecov"

# artifacts:
#   # bdist_wheel puts your built wheel in the dist directory
#   - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.

notifications:
- provider: Email
  to:
  - nh.techn@gmail.com
  on_build_success: false
  on_build_failure: false
  on_build_status_changed: true
