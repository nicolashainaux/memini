version: build{build}

max_jobs: 1

matrix:
  fast_finish: true
# Default configuration is actually for master and pre-release branches.
# Branch dev overrides several settings after this default configuration.
# Deployment will be added for branch master only.

install:
  # Only python3.8 will be supported on Windows
  # 3.8.6 is the version currently tested (via pyenv).
  - cmd: echo %PATH:;=&echo.%
  - cmd: set PYTHONIOENCODING=utf-8
  - cmd: py -0
  - cmd: set PY_PYTHON=3.8
  - cmd: set PATH=C:\\Python38-x64\\;C:\\Python38-x64\\Scripts;%USERPROFILE%\\.poetry\\bin;%PATH%
  - cmd: powershell -command "iwr -outf get-pip.py https://bootstrap.pypa.io/get-pip.py"
  - cmd: C:\\Python38-x64\\python.exe get-pip.py
  - cmd: pip3.8 install pyenv-win --target %USERPROFILE%\.pyenv
  - cmd: pyenv install 3.8.6
  - cmd: pyenv global 3.8.6
  - cmd: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | %PYTHON38%
  - cmd: python --version
  - cmd: python -m venv py38
  - cmd: .\py38\Scripts\activate.bat
  - cmd: poetry install
  - cmd: deactivate
  # Ubuntu
  # We need wheel installed to build wheels
  - sh: sudo apt -y update
  - sh: sudo apt install -y python3-venv python3-pip python-is-python3
  # Following dependencies are required to let pyenv compile Python.
  - sh: sudo apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl
  # As of 28th october 2020, the debian packages for tox dependencies python3-virtualenv and virtualenv
  # being buggy, tox must be installed from PyPI. tox and to-pyenv have been added to dev dependencies.
  - sh: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
  - sh: source $HOME/.poetry/env
  - sh: curl https://pyenv.run | bash
  - sh: export PATH="$HOME/.pyenv/bin:$PATH"
  - sh: eval "$(pyenv init -)"
  - sh: eval "$(pyenv virtualenv-init -)"
  - sh: pyenv install -v 3.6.12
  - sh: pyenv install -v 3.7.9
  - sh: pip3 install tox tox-pyenv
  - sh: python -m venv py38
  - sh: source py38/bin/activate
  - sh: poetry install
  - sh: deactivate
  - sh: pyenv global 3.6.12
  - sh: python -m venv py36
  - sh: source py36/bin/activate
  - sh: poetry install
  - sh: deactivate
  - sh: pyenv global 3.7.9
  - sh: python -m venv py37
  - sh: source py37/bin/activate
  - sh: poetry install
  - sh: deactivate
  - sh: pyenv global system

build: off

test_script:
  - cmd: .\py38\Scripts\activate.bat
  - cmd: pytest
  # We do not need to run the coverage via poetry. The tox tests suite is defined in pyproject.toml
  - sh: tox

for:
-
    branches:
        only:
            - master
            - pre-release
    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python
    # https://www.appveyor.com/docs/linux-images-software#python
    environment:
      matrix:
        - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
          PYTHON36: "C:\\Python36-x64\\python.exe"
          PYTHON37: "C:\\Python37-x64\\python.exe"
          PYTHON38: "C:\\Python38-x64\\python.exe"
          PY_PYTHON: "3.8"
        - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004

-
    branches:
        only:
            - dev
    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python
    # https://www.appveyor.com/docs/linux-images-software#python
    environment:
      matrix:
        - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004

    install:
      # We need wheel installed to build wheels
      - sh: sudo apt -y update
      - sh: sudo apt install -y python3-venv python3-pip python-is-python3
      # Following dependencies are required to let pyenv compile Python.
      - sh: sudo apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl
      # As of 28th october 2020, the debian packages for tox dependencies python3-virtualenv and virtualenv
      # being buggy, tox must be installed from PyPI.
      - sh: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
      - sh: source $HOME/.poetry/env
      - sh: curl https://pyenv.run | bash
      # Adding ~/.local/bin to $PATH is required to use globally pip3-installed tox.
      - sh: export PATH="$HOME/.pyenv/bin:$HOME/.local/bin:$PATH"
      - sh: eval "$(pyenv init -)"
      - sh: eval "$(pyenv virtualenv-init -)"
      - sh: pyenv install -v 3.6.12
      - sh: pyenv install -v 3.7.9
      - sh: pip3 install tox tox-pyenv
      - sh: python -m venv py38
      - sh: source py38/bin/activate
      - sh: poetry install
      - sh: deactivate
      - sh: pyenv global 3.6.12
      - sh: python -m venv py36
      - sh: source py36/bin/activate
      - sh: poetry install
      - sh: deactivate
      - sh: pyenv global 3.7.9
      - sh: python -m venv py37
      - sh: source py37/bin/activate
      - sh: poetry install
      - sh: deactivate
      - sh: pyenv global system

    test_script:
      - sh: source py38/bin/activate
      - sh: tox -c tox_ci.ini
      - sh: poetry run coverage run --source=memini -m pytest -vv

    after_test:
        # COVERALLS_REPO_TOKEN's value is secret and cannot be published. It is:
        # - taken from coveralls.io > memini > settings
        # - set directly in ci.appveyor.com > memini > settings > environment
        #   (Ubuntu2004)
        - sh: poetry run coveralls

    # branches:
    #     only:
    #         - master
    #
    # ADD DEPLOYMENT PART


#   # This step builds your wheels.
#   - cmd: "%PYTHON%\\python.exe setup.py bdist_wheel"
#   - sh: "codecov"

# artifacts:
#   # bdist_wheel puts your built wheel in the dist directory
#   - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.

notifications:
- provider: Email
  to:
  - nh.techn@gmail.com
  on_build_success: false
  on_build_failure: false
  on_build_status_changed: true
